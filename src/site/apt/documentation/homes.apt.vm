 -----
 Uqbar Project
 -----
 ${project.name}
 -----

Repos

 Los objetos repositorio o <<Repos>> son los responsables de 

 * agregar
 
 * eliminar
 
 * actualizar
 
 * y consultar de diferentes maneras los objetos de dominio
 
 []
   

 Los repos de tu aplicación deben extender de PersistentRepo<T> donde T es 
 
 el tipo de objeto que estás guardando en el repositorio.

 []

 También tenés que definirle los métodos Class<T> getEntityType() y T createExample() en las subclases concretas 
 (ojo que si vas a definir una clase abstracta AbstractMiAplicacionRepo que unifique comportamiento 
 igualmente debés dejar que las subclases de ese Repo redefinan ambos métodos ya que no conocés la
 clase concreta de T).
 
 Los repos de tu aplicación definen la forma de acceder a los datos. Al 
 extender de PersistentRepo heredás los siguientes mensajes:

 * <<List<T> allInstances()>>: Devuelve todas las instancias persistidas.

 * <<void create(T object)>>: Persiste un nuevo objeto en la base de grafos. 

 * <<void update(T object)>>: Actualiza la información de la base de grafos 
 de un objeto ya persistido previamente.
 
 * <<void delete(T object)>>: Elimina de la base de grafos el objeto pasado.
 
 * <<T searchById(int id)>>: Busca y devuelve un solo objeto con el id pasado por parámetro.

 * <<List<T> searchByExample(T example)>>: Devuelve una lista con instancias del tipo T, en la lista van a estar los objetos que tengan los mismos atributos no nulos que el objeto ejemplo que pasaste como parámetro. 
   Ej: Si paso un example de Persona con todos los atributos nulos y el nombre distinto de null, por ejemplo "Pablo", me va a traer todas las personas con ese nombre.
   <<Es importante tener cuidado que el objeto example no tenga tipos primitivos>> (int, boolean, etc.) 
   <<ni inicializaciones por defecto para los atributos anotados con @PersistentField>> (tanto en el constructor como en la definición de la clase)
   porque de lo contrario vas a tener inconvenientes a la hora de hacer este tipo de búsquedas.
   <<Los queries by example sobre relaciones no está soportada por el momento.>> 
   
 []

 Atención con el uso de estos mensajes, una buena distribución de responsabilidades estaría pensada para que los repos de tu aplicación le den servicios de mayor nivel y la aplicación use algo más
 que un searchByExample.


* Restricciones de la búsqueda by example

 Si una película tiene un objeto género, no se puede hacer la búsqueda by example pasando como prototipo una película con un objeto género 
 
+--
new Pelicula => [
    genero = new Genero("terror")
]
+--

 para buscar las películas de terror. Esto mismo vale para colecciones de objetos.
 
    
Definición

 Para definir un repo de celulares, la definición del repositorio en Java sería

+--
@Observable
public class RepositorioCelulares extends PersistentRepo<Celular> {
+--

 El mismo ejemplo en Xtend es:
  
+--
@Observable
class RepositorioCelulares extends PersistentRepo<Celular> {
+--

Ejemplo

* Xtend

 A continuación mostramos cómo sería un objeto repo o repositorio de clientes de una compañía de celulares:
 
+--
class RepoCelulares extends PersistentRepo<Celular> {

	override def getEntityType() {
		typeof(Celular)
	}

	override def createExample() {
		new Celular
	}

	// ***********************************************************
	// ** Inicialización y armado de un fixture o juego de datos
	// ***********************************************************
	new() {
		this.init
	}

	def void init() {
		this.createIfNotExists("Laura Iturbe", 88022202, getModelo("NOKIA LUMIA 625"), false)
		...
	}

	// ********************************************************
	// ** Altas y bajas
	// ********************************************************
	override create(Celular celular) {
		celular.validar
		validarClientesDuplicados(celular)
		super.create(celular)
	}

	def void validarClientesDuplicados(Celular celular) {
		val numero = celular.numero
		if (!this.search(numero).isEmpty) {
			throw new UserException("Ya existe un celular con el número: " + numero)
		}
	}

	def createIfNotExists(Celular celular) {
		var celularDB = this.get(celular.numero)
		if (celularDB == null) {
			this.create(celular)
			celularDB = celular
		}
		celularDB
	}

	def void createIfNotExists(String pNombre, Integer pNumero, ModeloCelular pModeloCelular,
		Boolean pRecibeResumenCuenta) {
		var celular = new Celular => [
			nombre = pNombre
			numero = pNumero
			modeloCelular = pModeloCelular
			recibeResumenCuenta = pRecibeResumenCuenta
		]
		this.createIfNotExists(celular)
	}

	// ********************************************************
	// ** Búsquedas
	// ********************************************************
	/**
	 * Devuelve un celular en base al número (que no puede repetirse)
	 */
	def Celular get(Integer unNumero) {
		val celulares = this.search(unNumero)
		if (celulares.isEmpty) {
			null
		} else {
			celulares.get(0)
		}
	}

	/**
	 * Hace la búsqueda de un celular únicamente por número
	 */
	def search(Integer numero) {
		this.search(numero, null)
	}

	/**
	 * Busca los celulares que coincidan con los datos recibidos. Tanto número como nombre pueden ser nulos,
	 * en ese caso no se filtra por ese atributo.
	 *
	 * Actualmente la búsqueda se hace by example pero requiere que sea exactamente ese número o ese nombre
	 */
	def search(Integer unNumero, String unNombre) {
		searchByExample(
			new Celular => [
				if (unNumero != null && unNumero > 0) {
					numero = unNumero
				}
				if (unNombre != null && !unNombre.equals("")) {
					nombre = unNombre
				}
			])
	}

}
+--

  Otra posibilidad cuando no hay un gran volumen de datos es traer el grafo de objetos a memoria y hacer el filtro
  en forma manual:
  
+--
	/**
	 * Para soportar búsquedas por substring hay que descomentar todo el código de abajo, el problema es que trae 
	 * a memoria todo el grafo de celulares (con una cantidad enorme de celulares puede traer problemas de performance)
	 * En ese caso el celular (12345, "Juan Gonzalez") será contemplado por la búsqueda (23, "Gonza")
	 * 
	 */
	def search(Integer unNumero, String unNombre) {
		allInstances.filter[celular|this.match(numero, celular.numero) && this.match(nombre, celular.nombre)].toList
	}
	
	def match(Object expectedValue, Object realValue) {
		if (expectedValue == null) {
			return true
		}
		if (realValue == null) {
			return false
		}
		realValue.toString().toLowerCase().contains(expectedValue.toString().toLowerCase())
	}
+--
    
* Java

 Veamos un ejemplo similar utilizando Java como lenguaje de programación:
 
+--
// TODO
+--     